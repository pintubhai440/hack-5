{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/google-genai';\n\nexport const ai = genkit({\n  plugins: [googleAI({apiKey: process.env.GEMINI_API_KEY})],\n  model: 'googleai/gemini-2.5-pro',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD,EAAE;YAAC,QAAQ,QAAQ,GAAG,CAAC,cAAc;QAAA;KAAG;IACzD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-exercise-video.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Analyzes a video to count exercise repetitions and provide form feedback.\n *\n * - analyzeExerciseVideo - A function that handles the exercise video analysis process.\n * - AnalyzeExerciseVideoInput - The input type for the analyzeExerciseVideo function.\n * - AnalyzeExerciseVideoOutput - The return type for the analyzeExerciseVideo function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnalyzeExerciseVideoInputSchema = z.object({\n  videoDataUri: z\n    .string()\n    .describe(\n      \"A video of a person performing an exercise, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'. Maximum 45 seconds.\"\n    ),\n  exerciseType: z.string().describe('The type of exercise being performed (e.g., push-ups, squats).'),\n});\nexport type AnalyzeExerciseVideoInput = z.infer<typeof AnalyzeExerciseVideoInputSchema>;\n\nconst AnalyzeExerciseVideoOutputSchema = z.object({\n  repetitionCount: z.number().describe('The number of repetitions counted in the video.'),\n  formFeedback: z.string().optional().describe('Optional feedback on the user\\'s form during the exercise.'),\n});\nexport type AnalyzeExerciseVideoOutput = z.infer<typeof AnalyzeExerciseVideoOutputSchema>;\n\nexport async function analyzeExerciseVideo(input: AnalyzeExerciseVideoInput): Promise<AnalyzeExerciseVideoOutput> {\n  return analyzeExerciseVideoFlow(input);\n}\n\nconst analyzeExerciseVideoPrompt = ai.definePrompt({\n  name: 'analyzeExerciseVideoPrompt',\n  input: {schema: AnalyzeExerciseVideoInputSchema},\n  output: {schema: AnalyzeExerciseVideoOutputSchema},\n  prompt: `You are a world-class AI fitness coach with expertise in biomechanics and exercise science. Your task is to analyze a user-submitted video and provide an accurate repetition count and constructive form feedback.\n\n**Video Analysis Instructions:**\n\n1.  **Exercise Identification:** The user has specified the exercise is '{{{exerciseType}}}'.\n2.  **Repetition Counting:**\n    *   Carefully analyze the video frame-by-frame.\n    *   Count only **full, completed repetitions** based on the criteria below.\n    *   **Push-up:** A full rep involves lowering the body until the chest is close to the floor and then pushing back up to the starting position with arms fully extended.\n    *   **Squat:** A full rep involves lowering the hips until the thighs are at least parallel to the floor, then returning to a standing position.\n    *   **Pull-up:** A full rep starts from a full hang, pulling the body up until the chin is over the bar, and then lowering back to a full hang.\n    *   **Lunge:** A full rep involves stepping forward or backward, lowering both knees to approximately 90-degree angles, and returning to the starting position. One leg movement counts as one rep.\n    *   **Sit-up:** A full rep involves raising the torso from a supine position until the chest is close to the knees and then returning to the starting position.\n3.  **Form Feedback:**\n    *   If you observe significant deviations from proper form (e.g., partial range of motion, incorrect posture, unsafe movements), provide concise, actionable feedback.\n    *   If the user's form is good, you do not need to provide feedback.\n4.  **Output:** Return the total number of completed repetitions and any form feedback in the specified JSON format.\n\n**User Video and Exercise:**\nVideo: {{media url=videoDataUri}}\nExercise Type: {{{exerciseType}}}\n`,\n});\n\nconst analyzeExerciseVideoFlow = ai.defineFlow(\n  {\n    name: 'analyzeExerciseVideoFlow',\n    inputSchema: AnalyzeExerciseVideoInputSchema,\n    outputSchema: AnalyzeExerciseVideoOutputSchema,\n    model: 'googleai/gemini-2.5-pro',\n  },\n  async input => {\n    const {output} = await analyzeExerciseVideoPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;IAEJ,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC/C;AAGO,eAAe,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACjD,MAAM;IACN,OAAO;QAAC,QAAQ;IAA+B;IAC/C,QAAQ;QAAC,QAAQ;IAAgC;IACjD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;AAqBX,CAAC;AACD;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;IACd,OAAO;AACT,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,2BAA2B;IAClD,OAAO;AACT;;;IA1CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/live-session/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {analyzeExerciseVideo as '408b9a0a77486225bc037b12102e973e5b81dbd6ce'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/live-session/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/live-session/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/live-session/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 447, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/live-session/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/live-session/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/live-session/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmR,GAChT,iDACA","debugId":null}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}